Git vs GitHub 핵심 정리 + 명령어 + 백업 방법

1. Git과 GitHub는 다르다

- Git: 버전 관리 도구. 내 컴퓨터에서 변경 이력 관리 가능. (인터넷 불필요)
- GitHub: Git 저장소를 백업/공유하는 클라우드 서비스. 협업, 히스토리 관리에 사용됨.
- Git만으로도 버전 관리 가능하다. GitHub는 백업/협업용이다.

2. Git 구조

- 작업 트리 (Working Directory): 실제 작업하는 파일
- 스테이지 (Staging Area): 커밋 전 임시 저장 공간
- 저장소 (Repository): 커밋된 버전 기록 보관소

작업 흐름:
작업 트리 → git add → 스테이지 → git commit → 저장소

3. 주요 명령어

git init                  → 현재 폴더를 Git 저장소로 초기화
git status               → 상태 확인
git add 파일명           → 스테이지에 올림
git add .                → 전체 파일 올림
git commit -m "메시지"   → 커밋
git log                  → 커밋 내역 확인
git diff                 → 변경점 비교
git rm 파일명            → 파일 삭제
git mv a b               → 파일 이름 변경
git clean -f             → 추적 안 되는 파일 삭제

4. 커밋 되돌리기

git log                      → 커밋 해시 확인
git checkout 해시           → 해당 커밋으로 임시 이동
git reset --soft 해시       → 커밋 취소, 스테이지 유지
git reset --hard 해시       → 완전히 되돌림 (주의)

5. 스테이지 수정 방법

- 파일 수정 후 다시 git add 하면 덮어씀
- 또는 git restore --staged 파일명 으로 스테이지에서 제거 후 재등록

6. Git Bash 명령어 요약

cd 폴더명         → 폴더 이동
cd ..              → 상위 폴더
ls                 → 폴더/파일 목록 보기
pwd                → 현재 위치 확인
clear              → 화면 정리

7. GitHub 없이 Git만으로도 버전 관리 가능하다

- Git은 내 컴퓨터에서 작동함
- GitHub는 온라인 백업 용도

8. 하위 폴더가 Git 저장소일 때 상위 폴더 Git 업로드 방법

문제: 하위 폴더가 이미 .git 저장소일 경우, 상위 폴더에서 Git 초기화 시 오류 발생

해결: 하위 폴더의 .git 폴더 제거
rm -rf 하위폴더/.git

그 후 상위 폴더에서 git init → add → commit → push 진행

9. Git 저장소를 GitHub에 백업하는 방법 (VS Code 기준)

(1) GitHub에서 새 리포지토리 만들기
 - github.com 로그인
 - 우측 상단 [+] → New repository
 - Repository name 입력
 - Private or Public 선택
 - README는 생성하지 말 것
 - Create repository 클릭

(2) VS Code에서 업로드
 - VS Code에서 폴더 열기
 - 터미널 열기 (Ctrl + ` )
 - 아래 명령어 입력:

git init
git add .
git commit -m "처음 커밋"
git remote add origin https://github.com/사용자이름/저장소이름.git
git branch -M main
git push -u origin main

(3) 업로드 완료 후 GitHub에서 확인 가능

10. 요약 비교

Git      : 버전 관리 도구 (로컬)
GitHub   : 클라우드 백업 및 협업 플랫폼
add      : 스테이지에 올림
commit   : 저장소에 기록
push     : GitHub로 업로드
pull     : GitHub에서 내 PC로 가져오기

Git push와 pull의 차이

- git push
  → 내 로컬 저장소(commit된 내용)를 GitHub 원격 저장소로 업로드
  → 방향: 내 컴퓨터 → GitHub
  → 보통 처음 백업하거나 수정 후 저장할 때 사용

- git pull
  → GitHub의 변경된 내용을 내 로컬 저장소로 가져옴
  → 방향: GitHub → 내 컴퓨터
  → 협업 시 다른 사람이 푸시한 내용을 받아올 때 사용

  <한번 더 정리>

Git Bash 수동 방식 vs VS Code GUI 방식 차이 정리

1. 기본 개념 비교

Git은 로컬(내 PC)에서 코드 버전을 관리하는 도구이고,  
GitHub는 그 버전들을 클라우드에 백업·공유하는 저장소다.

작업트리 → 스테이지 → 로컬 저장소 → 원격 저장소(GitHub)

이 흐름은 Git 내부에서만 적용되며, GitHub는 마지막 단계인 >>백업용 저장소<<일 뿐이다.

2. Git 구조 (Git에만 해당)

- 작업트리: 수정 중인 실제 파일
- 스테이지: 커밋 대기 상태 (`git add`)
- 로컬 저장소: 커밋된 이력 (`git commit`)
- 원격 저장소: GitHub 등 외부 서버 (`git push`)

→ 이 구조는 Git 내부에서만 존재. GitHub에는 '스테이지'나 '작업트리' 개념이 없음

3. Git Bash 방식 (수동 방식)

- 사용자가 직접 명령어 입력
- 과정이 분리되어 있어 내부 개념(Git 흐름)을 정확히 알 수 있음
- 실무에서 문제 해결 능력 강화에 좋음

Git Bash 명령어 예시 + 설명

git init                          - 현재 폴더를 Git 저장소로 초기화함
git add .                         - 현재 폴더 안의 모든 변경 파일을 스테이지로 올림
git commit -m "첫 커밋"           - 스테이지에 올린 파일을 로컬 저장소에 커밋(버전 기록)함
git remote add origin https://github.com/사용자명/저장소명.git
                                 - 원격 저장소(GitHub) 주소를 origin이라는 이름으로 등록함
git branch -M main               - 현재 브랜치 이름을 main으로 강제로 변경 (보통 초기엔 master임)
git push -u origin main          - 원격 저장소(origin)의 main 브랜치에 커밋 내용을 업로드 (최초 연결 시 -u 필수)

